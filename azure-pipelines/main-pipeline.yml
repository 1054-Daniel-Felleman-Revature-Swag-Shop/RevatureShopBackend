# The idea is to be inclusive of all source directories. (I.E. Commerce, Accounts, Eureka, Gateway, Inventory, Config, and Base(?))
# And using the variable to set a condition that will set pipeline variables variables that will control the flow of the pipeline.

trigger:
  branches:
    include: 
    - devops_pipeline
    - experimental-pipeline

# Was this directory updated? These variables will hold the answer 

parameters:
- name: serviceConditions
  type: object
  default:
  - base:
    name: 'base'
    jobName: 'BaseBuild'
  - accounts:
    name: 'accounts'
    requiresBase: true
    jobName: 'AccountsBuild'
  - commerce:
    name: 'commerce'
    requiresBase: true
    jobName: 'CommerceBuild'
  - config:
    name: 'config'
    jobName: 'ConfigBuild'
  - eureka-server:
    name: 'eureka-server'
    jobName: 'EurekaBuild'
  - inventory:
    name: 'inventory'
    requiresBase: true
    jobName: 'InventoryBuild'
  - Spring-Cloud-Gateway:
    name: 'Spring-Cloud-Gateway'
    jobName: 'SpringBuild'

stages:
- stage: Check
  displayName: Check Service Changes, Test and Build
  jobs:
  - job: CheckChanges
    variables:
      accounts: false
      base: false
      commerce: false
      config: false
      eureka-server: false
      inventory: false
      Spring-Cloud-Gateway: false
    steps:

      # This script will check the Repo for changes and store them in a variable updatedFiles.
      # The script will iterate over every object stored in updatedFiles to select paths with changes.
      # Pipeline variable will be updated from 'false' to 'True' if a change was made in that path.
      # This step controls which build tasks will be triggered   

    - powershell: |
        $updatedFiles = git diff HEAD HEAD~ --name-only
          $updatedFiles | ForEach-Object {
              Switch -Wildcard ($_ ) {
                  'accounts/*' { Write-Output '##vso[task.setvariable variable=accounts;isOutput=true]True' }
                  'base/*' { Write-Output '##vso[task.setvariable variable=base;isOutput=true]True' }
                  'commerce/*' { Write-Output '##vso[task.setvariable variable=commerce;isOutput=true]True' }
                  'config/*' { Write-Output '##vso[task.setvariable variable=config;isOutput=true]True' }
                  'eureka-server/*' { Write-Output '##vso[task.setvariable variable=eureka-server;isOutput=true]True' }
                  'inventory/*' { Write-Output '##vso[task.setvariable variable=inventory;isOutput=true]True' }
                  'Spring-Cloud-Gateway/*' { Write-Output '##vso[task.setvariable variable=Spring-Cloud-Gateway;isOutput=true]True' }
              }
          }
      name: ProduceVar    

    - powershell: |   
        Write-Output $[ProduceVar.base]
        if ( $[ProduceVar.base] )
        {
          Write-Output 'Inside loop.'
          Write-Output '##vso[task.setvariable variable=accounts;isOutput=true]True'
          Write-Output '##vso[task.setvariable variable=commerce;isOutput=true]True'
          Write-Output '##vso[task.setvariable variable=inventory;isOutput=true]True'
        }
      name: ProduceVar2

    - script: |
          echo 'Base will rebuild: $(ProduceVar.base)'
          echo 'Accounts will rebuild: $(ProduceVar2.accounts)'
          echo 'Commerce will rebuild: $(ProduceVar2.commerce)'
          echo 'Inventory will rebuild: $(ProduceVar2.inventory)'
          echo 'Config will rebuild: $(ProduceVar.config)'
          echo 'Eureka Server will rebuild: $(ProduceVar.eureka-server)'
          echo 'Spring Cloud Gateway will rebuild: $(ProduceVar.Spring-Cloud-Gateway)'

  - ${{ each service in parameters.serviceConditions }}:
    - job: ${{ service.jobName }}
      pool:
        name: java-16
      dependsOn: CheckChanges
      variables:
         accounts: $[ dependencies.CheckChanges.outputs['ProduceVar2.accounts'] ]
         base: $[ dependencies.CheckChanges.outputs['ProduceVar.base'] ]
         commerce: $[ dependencies.CheckChanges.outputs['ProduceVar2.commerce'] ]
         config: $[ dependencies.CheckChanges.outputs['ProduceVar.config'] ]
         eureka-server: $[ dependencies.CheckChanges.outputs['ProduceVar.eureka-server'] ]
         inventory: $[ dependencies.CheckChanges.outputs['ProduceVar2.inventory'] ]
         Spring-Cloud-Gateway: $[ dependencies.CheckChanges.outputs['ProduceVar.Spring-Cloud-Gateway'] ]
      steps:
       - script: |
            echo 'Base will rebuild: $(base)'
            echo 'Accounts will rebuild: $(accounts)'
            echo 'Commerce will rebuild: $(commerce)'
            echo 'Inventory will rebuild: $(inventory)'
            echo 'Config will rebuild: $(config)'
            echo 'Eureka Server will rebuild: $(eureka-server)'
            echo 'Spring Cloud Gateway will rebuild: $(Spring-Cloud-Gateway)'

        # currentBuild: $[ dependencies.CheckChanges.outputs['checkBuild.${{ service.name }}'] ] 
        # currentBuild2: $[ dependencies.CheckChanges.outputs['secondCheckBuild.${{ service.name }}'] ]
        # varFromA: $[ dependencies.CheckChanges.outputs['ProduceVar.MyVar'] ]

      #condition: or(eq(variables['currentBuild'], 'True'), eq(variables['currentBuild2'], 'True')

      # - script: echo '${{ service.name }} has been updated - $(${{ service.name }})'
      #   displayName:  'Checking ${{ service.name }}'
      
      # - task: SonarCloudPrepare@1
      #   inputs:
      #     SonarCloud: 'SonarCloud'
      #     organization: $(organization)
      #     scannerMode: 'CLI'
      #     configMode: 'file'

      # - script:  echo 'test'
