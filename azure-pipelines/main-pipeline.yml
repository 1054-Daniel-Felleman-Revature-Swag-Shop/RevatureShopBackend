# The idea is to be inclusive of all source directories. (I.E. Commerce, Accounts, Eureka, Gateway, Inventory, Config, and Base(?))
# And using the variable to set a condition that will set pipeline variables variables that will control the flow of the pipeline.

trigger:
  branches:
    include: 
    - devops_pipeline
    - experimental-pipeline

# Parameters to help with naming and calling variables, as well as providing a group of objects to loop over in later jobs.
variables:
    
    org: '1054-daniel-felleman-revature-swag-shop'
    projectKey: '1054-Daniel-Felleman-Revature-Swag-Shop_RevatureShopBackend'
    projectName: 'RevatureShopBackend'

parameters:
- name: serviceConditions
  type: object
  default:
  - accounts:
    name: 'accounts'
    requiresBase: true
    jobName: 'AccountsBuild'
  - commerce:
    name: 'commerce'
    requiresBase: true
    jobName: 'CommerceBuild'
  - config:
    name: 'config'
    jobName: 'ConfigBuild'
  - eureka-server:
    name: 'eureka-server'
    jobName: 'EurekaBuild'
  - inventory:
    name: 'inventory'
    requiresBase: true
    jobName: 'InventoryBuild'
  - Spring-Cloud-Gateway:
    name: 'Spring-Cloud-Gateway'
    jobName: 'SpringBuild'

stages:
- stage: Check
  displayName: Check Service Changes, Test and Build
  jobs:
  - job: CheckChanges
    pool: java-16
    steps:

# This script will check the Repo for changes and store them in a variable updatedFiles.
# The script will iterate over every object stored in updatedFiles to select paths with changes.
# Pipeline variable will be updated from 'false' to 'True' if a change was made in that path.
# This step controls which build tasks will be triggered.
# If Base is to be rebuilt, it will then set those services for which it is a dependency to build as well.   

    - powershell: |
        $updatedFiles = git diff HEAD HEAD~ --name-only
          $updatedFiles | ForEach-Object {
              Switch -Wildcard ($_ ) {
                  'accounts/*' { Write-Output '##vso[task.setvariable variable=accounts;isOutput=true]True' }
                  'base/*' { 
                      Write-Output '##vso[task.setvariable variable=base;isOutput=true]True' 
                      Write-Output '##vso[task.setvariable variable=accounts;isOutput=true]True'
                      Write-Output '##vso[task.setvariable variable=commerce;isOutput=true]True'
                      Write-Output '##vso[task.setvariable variable=inventory;isOutput=true]True'
                  }
                  'commerce/*' { Write-Output '##vso[task.setvariable variable=commerce;isOutput=true]True' }
                  'config/*' { Write-Output '##vso[task.setvariable variable=config;isOutput=true]True' }
                  'eureka-server/*' { Write-Output '##vso[task.setvariable variable=eureka-server;isOutput=true]True' }
                  'inventory/*' { Write-Output '##vso[task.setvariable variable=inventory;isOutput=true]True' }
                  'Spring-Cloud-Gateway/*' { Write-Output '##vso[task.setvariable variable=Spring-Cloud-Gateway;isOutput=true]True' }
              }
          }
      name: ProduceVar

# Printing a To-Do (Build) list. Note, that these are dynamic variables and if no variables exist
# The script will print literal.

    - script: |
          echo 'Base will rebuild: $(ProduceVar.base)'
          echo 'Accounts will rebuild: $(ProduceVar.accounts)'
          echo 'Commerce will rebuild: $(ProduceVar.commerce)'
          echo 'Inventory will rebuild: $(ProduceVar.inventory)'
          echo 'Config will rebuild: $(ProduceVar.config)'
          echo 'Eureka Server will rebuild: $(ProduceVar.eureka-server)'
          echo 'Spring Cloud Gateway will rebuild: $(ProduceVar.Spring-Cloud-Gateway)'

# This job ensures Base is built first, in case of dependencies.
# Setting a variable with the output variable from the previous job.
# It then checks that it's true, and continues on with the build, or skips.

  - job: BaseBuild
    pool:
      name: java-16
    dependsOn: CheckChanges
    variables:
        base: $[ dependencies.CheckChanges.outputs['ProduceVar.base'] ]
    condition: eq(variables['base'], 'True')
    steps:
      - script: echo 'Base has been updated - $(base)'
        displayName:  'Checking Base'

      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'
          organization: '$(org)'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: '$(projectKey)'
          cliProjectName: '$(projectName)'
          cliSources: '.'
          extraProperties: 'sonar.java.binaries=**/target/classes'

      - script: 'mvn clean package -f ./base/pom.xml '

      - task: SonarCloudAnalyze@1

      - task: SonarCloudPublish@1
        inputs:
          pollingTimeoutSec: '300'
          
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Build.Repository.LocalPath)/base/target/base-1.jar'
          artifact: 'base'
          publishLocation: 'pipeline'

      - script:  echo 'Built base'

# Here we're looping through the objects in our parameters. This serves as a way to name jobs (which require unique names)
# that are created as part of the loop. The job checks if a service is to be built, or skips the job.

  - ${{ each service in parameters.serviceConditions }}:
    - job: ${{ service.jobName }}
      pool:
        name: java-16
      dependsOn: BaseBuild
      
      variables:
         accounts: $[ dependencies.CheckChanges.outputs['ProduceVar.accounts'] ]
         base: $[ dependencies.CheckChanges.outputs['ProduceVar.base'] ]
         commerce: $[ dependencies.CheckChanges.outputs['ProduceVar.commerce'] ]
         config: $[ dependencies.CheckChanges.outputs['ProduceVar.config'] ]
         eureka-server: $[ dependencies.CheckChanges.outputs['ProduceVar.eureka-server'] ]
         inventory: $[ dependencies.CheckChanges.outputs['ProduceVar.inventory'] ]
         Spring-Cloud-Gateway: $[ dependencies.CheckChanges.outputs['ProduceVar.Spring-Cloud-Gateway'] ]

      condition: eq(variables['${{ service.name }}'], 'True')
      steps:
      - script: echo '${{ service.name }} has been updated - $(${{ service.name }})'
        displayName:  'Checking ${{ service.name }}'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'base'
          itemPattern: '**/*.jar'
          targetPath: '$(Build.Repository.LocalPath)/base/target/'


      - task: SonarCloudPrepare@1
        inputs:
          SonarCloud: 'SonarCloud'
          organization: '$(org)'
          scannerMode: 'CLI'
          configMode: 'manual'
          cliProjectKey: '$(projectKey)'
          cliProjectName: '$(projectName)'
          cliSources: '.'
          extraProperties: 'sonar.java.binaries=**/target/classes'
        
      - script: |
          if [ ${{ service.requiresBase }} = true ]
          then
            mvn install:install-file \
            -Dfile="./base/target/base-1.jar" \
            -DgroupId="com.revature" \
            -DartifactId="base" \
            -Dversion="1" \
            -Dpackaging="jar" \
            -DgeneratePom="true";

            mvn package -f './${{ service.name }}/pom.xml'

          else
             mvn package -f './${{ service.name }}/pom.xml'
          fi

