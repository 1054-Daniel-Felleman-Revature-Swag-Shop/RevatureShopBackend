# The idea is to be inclusive of all source directories. (I.E. Commerce, Accounts, Eureka, Gateway, Inventory, Config, and Base(?))
# And using the variable to set a condition that will set pipeline variables variables that will control the flow of the pipeline.

trigger:
  branches:
    include: 
    - devops_pipeline

# Was this directory updated? These variables will hold the answer 
variables:
  accounts: false
  base: false
  commerce: false
  config: false
  eureka-server: false
  inventory: false
  Spring-Cloud-Gateway: false

parameters:
- name: serviceConditions
  type: object
  default:
  - base:
    name: 'base'
    jobName: 'BaseBuild'
  - accounts:
    name: 'accounts'
    requiresBase: true
    jobName: 'AccountsBuild'
  - commerce:
    name: 'commerce'
    requiresBase: true
    jobName: 'CommerceBuild'
  - config:
    name: 'config'
    jobName: 'ConfigBuild'
  - eureka-server:
    name: 'eureka-server'
    jobName: 'EurekaBuild'
  - inventory:
    name: 'inventory'
    requiresBase: true
    jobName: 'InventoryBuild'
  - Spring-Cloud-Gateway:
    name: 'Spring-Cloud-Gateway'
    jobName: 'SpringBuild'

stages:
- stage: Check
  displayName: Check Service Changes, Test and Build
  jobs:
  - job: CheckChanges
    steps:
   
      # This script will check the Repo for changes and store them in a variable updatedFiles.
      # The script will iterate over every object stored in updatedFiles to select paths with changes.
      # Pipeline variable will be updated from 'false' to 'True' if a change was made in that path.
      # This step controls which build tasks will be triggered.

    - task: PowerShell@2
      displayName: Checking Service Directories
      inputs:
        targetType: 'inline'
        script: |
          $updatedFiles = git diff HEAD HEAD~ --name-only
          $updatedFiles | ForEach-Object {
              Switch -Wildcard ($_ ) {
                  'accounts/*' { Write-Output "##vso[task.setvariable variable=accounts]True" }
                  'base/*' { Write-Output "##vso[task.setvariable variable=base]True" }
                  'commerce/*' { Write-Output "##vso[task.setvariable variable=commerce]True" }
                  'config/*' { Write-Output "##vso[task.setvariable variable=config]True" }
                  'eureka-server/*' { Write-Output "##vso[task.setvariable variable=eureka-server]True" }
                  'inventory/*' { Write-Output "##vso[task.setvariable variable=inventory]True" }
                  'Spring-Cloud-Gateway/*' { Write-Output "##vso[task.setvariable variable=Spring-Cloud-Gateway]True" }
              }
          }
    
    - task: PowerShell@2
      displayName: Rebuild services, if base.
      inputs:
        targetType: 'inline'
        script: |   
          
          if ( $$(base) )
          {
              Write-Output "##vso[task.setvariable variable=accounts]True"
              Write-Output "##vso[task.setvariable variable=commerce]True"
              Write-Output "##vso[task.setvariable variable=inventory]True"
          }
    
  - ${{ each service in parameters.serviceConditions }}:
    - job: ${{ service.jobName }}
      dependsOn: CheckChanges
      steps:
      - script: echo '${{ service.name }} has been updated - $(${{ service.name }})'
        displayName:  'Checking ${{ service.name }}'

      #- ${{ if eq('True', 'True') }}:
      - ${{ eq(variables[${{ service.name }}], 'True') }}:
        # - script: echo "hello world."
        - template: './azure-templates/build-template.yml'
          parameters: 
            displayName: Testing and Building ${{ service.name }}
            mavenPomFile: "./${{ service.name }}/pom.xml"
            targetPath: "./${{ service.name }}"
            artifact: ${{ service.name }}
            ${{ if eq(variables['${{ service.requiresBase'], 'true') }}:
              options: "-f ./base/base-1.jar"
